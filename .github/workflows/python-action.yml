name: Python package

on: [push]

jobs:
  build:
    name: Test And Create Report Artifact
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: ["3.6.15"]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install unittest2 coverage
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#       - name: Lint with flake8
#         run: |
#           # stop the build if there are Python syntax errors or undefined names
#           flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#           # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#           flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with unittest
        run: |
            coverage run -m unittest test_mines.py
      - name: Create coverage report
        run: |
            coverage html -d ${{ matrix.python-version }}
      - name: Upload coverage test results
        uses: actions/upload-artifact@v3
        with:
          name: htmlcov
          path: ${{ matrix.python-version }}/*
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
#  docker:
#    name: Publish - Docker Hub
#    runs-on: ubuntu-latest
#    needs: [build]
#    env:
#      REPO: ${{ secrets.DOCKER_REPO }}
#    steps:
#      - uses: actions/checkout@v1
#      - name: Login to Docker Hub
#        run: docker login -u ${{ secrets.DOCKER_USER }}
#             -p ${{ secrets.DOCKER_PASS }}
#      - name: Build Docker image
#        run: docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
#      - name: Publish Docker image
#        run: docker push $REPO
#  redeploy:
#    name: Redeploy webhook call
#    runs-on: ubuntu-latest
#    needs: [docker]
#    steps:
#      - name: Deploy docker container webhook
#        uses: joelwmale/webhook-action@master
#        env:
#          WEBHOOK_URL: ${{ secrets.DEPLOY_WEBHOOK_URL  }}
